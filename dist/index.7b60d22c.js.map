{"mappings":"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","sources":["src/script/constant.ts","src/script/snake.ts","src/script/app.ts"],"sourcesContent":["\r\nexport const TABLE_WIDTH = 30\r\nexport const TABLE_HEIGHT = 40","import { Position } from \"../types/food-types\"\r\nimport { Direc, Point } from \"../types/snake-types\"\r\nimport { TABLE_HEIGHT, TABLE_WIDTH } from \"./constant\"\r\n\r\nconst getRandomInt = (max: number): number => {\r\n    return Math.floor(Math.random() * max);\r\n}\r\n\r\nexport default class Snake {\r\n    snake: Point[]\r\n    table: HTMLElement | null\r\n    nextDirection: Direc\r\n    actualDirection: Direc\r\n    lastPress: number\r\n    speed: number\r\n    foodPosition: Position\r\n    food: HTMLElement | null\r\n    lastElt: null | {\r\n        status: boolean,\r\n        x: number,\r\n        y: number\r\n    }\r\n\r\n    constructor (idTable: string, idFood: string) {\r\n        this.snake = [\r\n            {x: 0, y: 0},\r\n            {x: 1, y: 0},\r\n            {x: 2, y: 0}\r\n        ]\r\n        this.table = document.getElementById(idTable)\r\n        this.actualDirection = 'r'\r\n        this.nextDirection = 'r'\r\n        this.lastPress = Date.now()\r\n        this.speed = 200\r\n        this.foodPosition = {\r\n            x: 0,\r\n            y: 0\r\n        }\r\n        this.food = document.getElementById(idFood)\r\n        this.lastElt = null\r\n    }\r\n\r\n    buildSnake () {\r\n        if(!this.table) return\r\n        \r\n        this.table.innerHTML = ''\r\n        this.snake.forEach((pt: Point, k: number) => {\r\n            const block = document.createElement('div')\r\n            block.classList.add('point')\r\n            block.style.left = `${pt.x * 10}px`\r\n            block.style.top = `${pt.y * 10}px`\r\n\r\n            this.table?.insertAdjacentElement('beforeend', block)\r\n        })\r\n    }\r\n    movesnake () {\r\n        const actualHead = this.snake[this.snake.length - 1]\r\n\r\n        switch(this.actualDirection){\r\n            case 't':\r\n                if(actualHead.y > 0){\r\n                    this.snake[this.snake.length - 1] = {\r\n                        x: actualHead.x,\r\n                        y: actualHead.y - 1\r\n                    }\r\n                } \r\n                break\r\n            case 'r':\r\n                if(actualHead.x < TABLE_WIDTH - 1){\r\n                    this.snake[this.snake.length - 1] = {\r\n                        x: actualHead.x + 1,\r\n                        y: actualHead.y\r\n                    }\r\n                }\r\n                break;\r\n            case 'b':\r\n                if(actualHead.y < TABLE_HEIGHT - 1){\r\n                    this.snake[this.snake.length - 1] = {\r\n                        x: actualHead.x,\r\n                        y: actualHead.y + 1\r\n                    }\r\n                } \r\n                break\r\n            case 'l':\r\n                if(actualHead.x > 0){\r\n                    this.snake[this.snake.length - 1] = {\r\n                        x: actualHead.x - 1,\r\n                        y: actualHead.y\r\n                    }\r\n                }\r\n                break\r\n        }\r\n        if(this.snake[this.snake.length - 1].x === this.foodPosition.x && this.snake[this.snake.length - 1].y === this.foodPosition.y){\r\n            \r\n            this.lastElt = {\r\n                status: false,\r\n                x: this.snake[1].x,\r\n                y: this.snake[1].y\r\n            }\r\n            this.buildNewFood()\r\n        }\r\n\r\n        const makeChain = (k: number = this.snake.length - 2, value = actualHead) => {\r\n            if(k < 0) return\r\n            \r\n            const tempValue = this.snake[k]\r\n            this.snake[k] = value\r\n            \r\n            makeChain(k - 1, tempValue)\r\n        }\r\n        if(this.snake[this.snake.length - 1] !== actualHead){\r\n            makeChain()\r\n            if(this.lastElt !== null && this.lastElt.status){\r\n                this.snake.unshift(this.lastElt)\r\n                this.lastElt = null\r\n            }\r\n            if(this.lastElt !== null) this.lastElt.status = true\r\n        }\r\n        if(this.nextDirection !== this.actualDirection) this.actualDirection = this.nextDirection\r\n    }\r\n    updateDirection (d: Direc) {\r\n        if(\r\n            (d === 't' && this.actualDirection === 'b') || \r\n            (d === 'b' && this.actualDirection === 't')\r\n        ) return\r\n        if(\r\n            (d === 'l' && this.actualDirection === 'r') || \r\n            (d === 'r' && this.actualDirection === 'l')\r\n        ) return\r\n        \r\n        if(Date.now() - this.lastPress > this.speed){\r\n            this.nextDirection = d\r\n            this.lastPress = Date.now()\r\n        }  \r\n    }\r\n    play () {\r\n        this.buildNewFood()\r\n    }\r\n\r\n\r\n    buildNewFood () {\r\n        if(!this.food) return\r\n        \r\n        this.generatPosition(this.snake)\r\n        this.food.style.left = `${this.foodPosition.x * 10}px`\r\n        this.food.style.top = `${this.foodPosition.y * 10}px`\r\n    }\r\n    generatPosition (snake: Point[]) {\r\n        let newX = this.foodPosition.x\r\n        let newY = this.foodPosition.y\r\n        while(!(this.foodPosition.x !== newX || this.foodPosition.y !== newY) || (snake.indexOf({x: newX, y: newY}) > 0)){\r\n            newX = getRandomInt(TABLE_WIDTH)\r\n            newY = getRandomInt(TABLE_HEIGHT)\r\n        }\r\n        this.foodPosition = {\r\n            x: newX,\r\n            y: newY\r\n        }\r\n    }\r\n}","import Food from \"./food\";\r\nimport Snake from \"./snake\";\r\n\r\nconst S = new Snake('snake-point', 'food')\r\nS.play()\r\nconst time = setInterval(() => {\r\n    S.movesnake()\r\n    S.buildSnake()\r\n}, S.speed)\r\n\r\nconst btnT = document.getElementById('btn-t')\r\nconst btnR = document.getElementById('btn-r')\r\nconst btnB = document.getElementById('btn-b')\r\nconst btnL = document.getElementById('btn-l')\r\n\r\nbtnT?.addEventListener('pointerdown', function(e){\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    S.updateDirection('t')\r\n})\r\nbtnR?.addEventListener('pointerdown', function(e){\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    S.updateDirection('r')\r\n})\r\nbtnB?.addEventListener('pointerdown', function(e){\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    S.updateDirection('b')\r\n})\r\nbtnL?.addEventListener('pointerdown', function(e){\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    S.updateDirection('l')\r\n})\r\ndocument.addEventListener('keydown', function(e){\r\n    e.preventDefault()\r\n    if(e.code === 'ArrowUp') S.updateDirection('t')\r\n    if(e.code === 'ArrowDown') S.updateDirection('b')\r\n    if(e.code === 'ArrowLeft') S.updateDirection('l')\r\n    if(e.code === 'ArrowRight') S.updateDirection('r')\r\n})"],"names":["$1a9513332ad7bfbe$var$getRandomInt","max","Math","floor","random","$7494a699c602c514$var$S","buildSnake","this","table","innerHTML","snake","forEach","pt","k","ref","block","document","createElement","classList","add","style","left","x","top","y","insertAdjacentElement","movesnake","actualHead","length","actualDirection","$079fa55f77eccb9e$export$59c9e59c1fc6920a","$079fa55f77eccb9e$export$c63c059ca5f83d93","foodPosition","lastElt","status","buildNewFood","makeChain","value","tempValue","unshift","nextDirection","updateDirection","d","Date","now","lastPress","speed","play","food","generatPosition","newX","newY","indexOf","constructor","idTable","idFood","getElementById","setInterval","$7494a699c602c514$var$btnT","$7494a699c602c514$var$btnR","$7494a699c602c514$var$btnB","$7494a699c602c514$var$btnL","addEventListener","e","preventDefault","stopPropagation","code"],"version":3,"file":"index.7b60d22c.js.map"}